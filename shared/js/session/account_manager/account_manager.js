const AccountManager={_observers:[],_observersArray:[],initFlag:!1,restoreObserves:!1,state:{LOGGED_IN:0,LOGGED_OUT:1,REFRESHED:2},init(){this.initFlag||(this.initFlag=!0,window.addEventListener("session-disconnected",()=>{const{accountmanager:t}=window.api;t&&this._observers.forEach(e=>{var{authenticatorId:e}=e;t.removeObserver(e,this.observer)}),this.connected=!1,this._observers=[],delete this.observer}),window.addEventListener("services-load-complete",()=>{this.createObserver(),this.processPendingRequest()}))},createObserver(){var{accountmanager:e}=window.api;class t extends lib_accounts.AccountObserverBase{constructor(e,t){super(e.id,t)}display(){return"Account observer"}callback(a){return AccountManager._observers.forEach(e=>{var t,r;e.authenticatorId===a.accountType&&(r=[t={...a},"accountType","authenticatorId"],AccountManager.replaceObjectKey(...r),e.callback(t))}),Promise.resolve()}}this.observer=new t(e,window.api.session)},addObserver(...e){return taskScheduler.request({serverName:taskScheduler.ACCOUNTS,funcName:"addObserver",args:e})},removeObserver(...e){return taskScheduler.request({serverName:taskScheduler.ACCOUNTS,funcName:"removeObserver",args:e})},notify(...e){return this.replaceObjectKey(e[0],"authenticatorId","accountType"),taskScheduler.request({serverName:taskScheduler.ACCOUNTS,funcName:"notify",args:e})},async observe(t,r,e=!1){if(this.observer){if(!this._observers.find(e=>e.authenticatorId===t)){const{accountmanager:c}=window.api;c.addObserver(t,this.observer)}this._observers.push({authenticatorId:t,callback:r})}if(this.restoreObserves||this._observersArray.push({authenticatorId:t,callbackHandle:r}),"kaiaccount"===t&&!e){await LazyLoader.load("http://shared.localhost:8081/js/helper/account/crypto_helper.js");var a={name:"account-manager",data:{action:"getAccounts",publicKey:await AccountCryptoHelper.getKey()}},e=!1;try{var s=await new WebActivity(a.name,a.data).start();const n=await AccountCryptoHelper.unwrapKey(s);e=n.find(e=>e.authenticatorId===t),r({authenticatorId:t,accountId:e?e.accountId:"",state:e?this.state.LOGGED_IN:this.state.LOGGED_OUT})}catch(e){r({authenticatorId:t,accountId:"",state:this.state.LOGGED_OUT})}}},unobserve(s,c){const{accountmanager:e}=window.api;if(e){let r=0,a=!1;this._observers.forEach((e,t)=>{e.authenticatorId===s&&(a||e.callback!==c||(this._observers.splice(t,1),a=!0),r++)}),1===r&&e.removeObserver(s,this.observer)}},processPendingRequest(){this.restoreObserves=!0,this._observersArray.forEach(e=>{var{authenticatorId:t,callbackHandle:e}=e;this.observe(t,e)}),this.restoreObserves=!1},replaceObjectKey(e,t,r){delete Object.assign(e,{[r]:e[t]})[t]}};AccountManager.init(),window.AccountManager=AccountManager;
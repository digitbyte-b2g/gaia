const AudioVolumeManager={_observersArray:[],connected:!1,initFlag:!1,AudioVolumeState:{},init(){this.initFlag||(this.initFlag=!0,window.addEventListener("session-disconnected",()=>{this.connected=!1}),window.addEventListener("services-load-complete",()=>{this.connected||(this.connected=!0,"undefined"!=typeof lib_audiovolume&&(this.AudioVolumeState=lib_audiovolume.AudioVolumeState),this.processPendingRequest())}))},requestVolumeDown(){return taskScheduler.request({serverName:taskScheduler.AUDIO_VOLUME,funcName:"requestVolumeDown"})},requestVolumeShow(){return taskScheduler.request({serverName:taskScheduler.AUDIO_VOLUME,funcName:"requestVolumeShow"})},requestVolumeUp(){return taskScheduler.request({serverName:taskScheduler.AUDIO_VOLUME,funcName:"requestVolumeUp"})},observeAudioVolumeChanged(e){this.connected&&window.api.audiovolumemanager.addEventListener(window.api.audiovolumemanager.AUDIO_VOLUME_CHANGED_EVENT,e),this._observersArray.push(e)},unobserveAudioVolumeChanged(r){if(this.connected){window.api.audiovolumemanager.removeEventListener(window.api.audiovolumemanager.AUDIO_VOLUME_CHANGED_EVENT,r);let i=!1;this._observersArray.forEach((e,o)=>{i||e!==r||(this._observersArray.splice(o,1),i=!0)})}},processPendingRequest(){this._observersArray.forEach(e=>{this.connected&&window.api.audiovolumemanager.addEventListener(window.api.audiovolumemanager.AUDIO_VOLUME_CHANGED_EVENT,e)})}};AudioVolumeManager.init(),window.AudioVolumeManager=AudioVolumeManager;
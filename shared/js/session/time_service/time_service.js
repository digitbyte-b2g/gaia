const TimeService={eventList:["timeChange","timeZoneChange"],timeObservers:[],restoreObserves:!1,init(){window.addEventListener("session-disconnected",()=>{const{timeservice:e}=window.api;e&&(e.removeObserver(lib_time.CallbackReason.TIME_CHANGED,this.observer),e.removeObserver(lib_time.CallbackReason.TIMEZONE_CHANGED,this.observer)),delete this.observer}),window.addEventListener("services-load-observer",()=>{this.createObserver(),this.processPendingRequest()})},createObserver(){class e extends lib_time.TimeObserverBase{constructor(e,r){super(e.id,r)}display(){return"Time observer"}callback(){return TimeService.timeObservers.forEach(e=>{e()}),Promise.resolve()}}var{timeservice:r}=window.api;this.observer=new e(r,window.api.session)},processPendingRequest(){if(this.restoreObserves=!0,0<TimeService.timeObservers.length){const{timeservice:e}=window.api;e.addObserver(lib_time.CallbackReason.TIME_CHANGED,this.observer),e.addObserver(lib_time.CallbackReason.TIMEZONE_CHANGED,this.observer)}this.restoreObserves=!1},set(...e){return taskScheduler.request({serverName:taskScheduler.TIME_SERVICE,funcName:"set",args:e})},get(){return taskScheduler.request({serverName:taskScheduler.TIME_SERVICE,funcName:"get"})},addEventListener(e,r){if(e===TimeService.eventList[0])if(0<TimeService.timeObservers.length)TimeService.timeObservers.push(r);else{const{timeservice:s}=window.api;s&&(s.addObserver(lib_time.CallbackReason.TIME_CHANGED,this.observer),s.addObserver(lib_time.CallbackReason.TIMEZONE_CHANGED,this.observer)),TimeService.timeObservers.push(r)}},removeEventListener(e,s){if(e===TimeService.eventList[0])if(1<TimeService.timeObservers.length)TimeService.timeObservers.forEach((e,r)=>{e===s&&TimeService.timeObservers.splice(r,1)});else if(s===TimeService.timeObservers[0]){TimeService.timeObservers.splice(0,1);const{timeservice:r}=window.api;r.removeObserver(lib_time.CallbackReason.TIME_CHANGED,this.observer),r.removeObserver(lib_time.CallbackReason.TIMEZONE_CHANGED,this.observer)}}};TimeService.init(),window.TimeService=TimeService;
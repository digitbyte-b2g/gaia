const ContactsManager={connected:!1,initFlag:!1,eventListenerInfo:{},onContactChangeCallback:null,onSpeedDialChangeCallback:null,onContactGroupChangeCallback:null,onBlockedNumberChangeCallback:null,EventMap:{BLOCKED_NUMBER_CHANGE:"blockChange",CONTACT_CHANGE:"contactChange",GROUP_CHANGE:"groupChange",SPEED_DIAL_CHANGE:"speedDialChange",SIM_LOADED_EVENT:"simLoadedEvent"},ChangeReason:{CREATE:0,UPDATE:1,REMOVE:2},FilterByOption:{NAME:0,GIVEN_NAME:1,FAMILY_NAME:2,TEL:3,EMAIL:4,CATEGORY:5},FilterOption:{EQUALS:0,CONTAINS:1,MATCH:2,STARTS_WITH:3,FUZZY_MATCH:4},Order:{ASCENDING:0,DESCENDING:1},SortOption:{GIVEN_NAME:0,FAMILY_NAME:1,NAME:2},init(){this.initFlag||(this.initFlag=!0,window.addEventListener("session-disconnected",()=>{this.connected=!1}),window.addEventListener("services-load-observer",()=>{var e,t,a,r,n;this.connected||(this.connected=!0,{BLOCKEDNUMBER_CHANGE_EVENT:e,CONTACTS_CHANGE_EVENT:t,GROUP_CHANGE_EVENT:a,SPEEDDIAL_CHANGE_EVENT:r,SIM_CONTACT_LOADED_EVENT:n}=window.api.contactsmanager,Object.assign(this.EventMap,{[this.EventMap.BLOCKED_NUMBER_CHANGE]:e,[this.EventMap.CONTACT_CHANGE]:t,[this.EventMap.GROUP_CHANGE]:a,[this.EventMap.SPEED_DIAL_CHANGE]:r,[this.EventMap.SIM_LOADED_EVENT]:n}),{ChangeReason:e,FilterByOption:t,FilterOption:a,Order:r,SortOption:n}=window.lib_contacts,this.ChangeReason=e,this.FilterByOption=t,this.FilterOption=a,this.Order=r,this.SortOption=n),this.recoverListener()}))},find(...e){return taskScheduler.request({serverName:taskScheduler.CONTACTS,funcName:"find",args:e})},getAll(...e){return taskScheduler.request({serverName:taskScheduler.CONTACTS,funcName:"getAll",args:e})},getContactByID(...e){return taskScheduler.request({serverName:taskScheduler.CONTACTS,funcName:"get",args:e})},remove(...e){return taskScheduler.request({serverName:taskScheduler.CONTACTS,funcName:"remove",args:e})},save(e,...t){return taskScheduler.request({serverName:taskScheduler.CONTACTS,funcName:e?"add":"update",args:t})},moveContactsToDevice(...e){return taskScheduler.request({serverName:taskScheduler.CONTACTS,funcName:"moveContactsToDevice",args:e})},moveContactsToSim(...e){return taskScheduler.request({serverName:taskScheduler.CONTACTS,funcName:"moveContactsToSim",args:e})},clear(){return taskScheduler.request({serverName:taskScheduler.CONTACTS,funcName:"clearContacts"})},getCount(){return taskScheduler.request({serverName:taskScheduler.CONTACTS,funcName:"getCount"})},getSpeedDials(){return taskScheduler.request({serverName:taskScheduler.CONTACTS,funcName:"getSpeedDials"})},removeSpeedDial(...e){return taskScheduler.request({serverName:taskScheduler.CONTACTS,funcName:"removeSpeedDial",args:e})},setSpeedDial(e,{dialKey:t,tel:a,contactId:r}){return taskScheduler.request({serverName:taskScheduler.CONTACTS,funcName:e?"addSpeedDial":"updateSpeedDial",args:[t,a,r]})},getAllICE(){return taskScheduler.request({serverName:taskScheduler.CONTACTS,funcName:"getAllIce"})},removeICE(...e){return taskScheduler.request({serverName:taskScheduler.CONTACTS,funcName:"removeIce",args:e})},setICE(...e){return taskScheduler.request({serverName:taskScheduler.CONTACTS,funcName:"setIce",args:e})},getAllGroups(){return taskScheduler.request({serverName:taskScheduler.CONTACTS,funcName:"getAllGroups"})},saveGroup(e,t){return taskScheduler.request({serverName:taskScheduler.CONTACTS,funcName:e?"addGroup":"updateGroup",args:e?[t.name]:[t.id,t.name]})},getContactIdsFromGroup(...e){return taskScheduler.request({serverName:taskScheduler.CONTACTS,funcName:"getContactidsFromGroup",args:e})},removeGroup(...e){return taskScheduler.request({serverName:taskScheduler.CONTACTS,funcName:"removeGroup",args:e})},getAllBlockedNumbers(){return taskScheduler.request({serverName:taskScheduler.CONTACTS,funcName:"getAllBlockedNumbers"})},findBlockedNumbers(...e){return taskScheduler.request({serverName:taskScheduler.CONTACTS,funcName:"findBlockedNumbers",args:e})},addBlockedNumber(...e){return taskScheduler.request({serverName:taskScheduler.CONTACTS,funcName:"addBlockedNumber",args:e})},removeBlockedNumber(...e){return taskScheduler.request({serverName:taskScheduler.CONTACTS,funcName:"removeBlockedNumber",args:e})},addEventListener(e,t){Object.values(this.EventMap).includes(e)&&(this.connected&&window.api.contactsmanager.addEventListener(this.EventMap[e],t),this.eventListenerInfo[e]?this.eventListenerInfo[e].push(t):this.eventListenerInfo[e]=[t])},removeEventListener(a,r){Object.values(this.EventMap).includes(a)&&(this.connected&&window.api.contactsmanager.removeEventListener(this.EventMap[a],r),this.eventListenerInfo[a]&&this.eventListenerInfo[a].forEach((e,t)=>{e===r&&this.eventListenerInfo[a].splice(t,1)}))},recoverListener(){for(const e in this.eventListenerInfo){const t=this.eventListenerInfo[e],a=this.EventMap[e];a&&t.forEach(e=>{window.api.contactsmanager.addEventListener(a,e)})}this.onContactChange(this.onContactChangeCallback),this.onSpeedDialChange(this.onSpeedDialChangeCallback),this.onContactGroupChange(this.onContactGroupChangeCallback),this.onBlockedNumberChange(this.onBlockedNumberChangeCallback)},onContactChange(e){this.onContactChangeCallback=e,this.connected&&(window.api.contactsmanager.oncontactchange=e)},onSpeedDialChange(e){this.onSpeedDialChangeCallback=e,this.connected&&(window.api.contactsmanager.onspeeddialchange=e)},onContactGroupChange(e){this.onContactGroupChangeCallback=e,this.connected&&(window.api.contactsmanager.oncontactgroupchange=e)},onBlockedNumberChange(e){this.onBlockedNumberChangeCallback=e,this.connected&&(window.api.contactsmanager.onblockednumberchange=e)}};ContactsManager.init(),window.ContactsManager=ContactsManager;